import { KeypairUtils } from "@/utils/keypairUtils";
import { Keypair } from "@solana/web3.js";

(async () => {
  console.log(`\n\x1b[1m\x1b[34m================ start ================\x1b[0m`);
  // 生成新的密钥对
  const keypair: Keypair = KeypairUtils.generateKeypair();
  console.log("publicKey:", keypair.publicKey.toBase58());
  console.log("privateKey:", Buffer.from(keypair.secretKey).toString("hex"));

  // laliga dev feepay
  //F3sci4481F3TyjNwfJ1BkfXQTqbA3fTdXo79UhqcJU3u
  // c4d0f27066d05130626858c8aa3d1292f4e596cf7230453ea12722a9540fab75d0c00287f4d189253eb0e725e52bd3b0edf0786ef62a43b45782946375dbb8cc

  // 28Ugregs5fcicetCw6SCx2a2XbMHCTX9VWpMPCWrCkLY | eb8e1b7c5a7ca40f17dd5242abd1df9a2b245857e2df3ba7bcc3f7b46811736010c60efed8616214a1953e1415385ea68b7ed1a5aabb87fe20a03949a28ba621
  // DB: 08019821c6d62eb55aeb033024469eaabd392503dd4b6b8af94c3c0325036fb6e4c32dca28bd13c33b6db197432055fd499e5926b736788d3c2895be9f133f7b33a2d00fe04cf6681ae59bebba2b5a6f19c5a53db166a5b46f1be0487d14070b8b9ac0345431a43c04f40f69ebea2fdb1b01294769264f44111fc7b26f1bf9ece6bb66652d15a709209ef1d3b9363936a6804f4bc69ecf6150b63eb73ec7b87b6ce821f204d4a8a0c6d709b265140a2619aa9cebcb9315ad237b957203db97e6bf6c30748c1556c791ce3f3b91fe92f6455bf8836d3f2544513890da43a448b9102a3730467b39b354d443dbad5a27d64c89c184002ca264f921094d5f7c12aa1f4a
  // 08022d4291b15c77b4c8060e4834218467534a2ca7aad6f3ef7778424adcdeb0d5085a9d5067269b76da7ffa8665aa0c92d3b2e2736af00a786d370723bf7ee66628bdb1ddcaf1ae34352bfb6956b4de329757b97fc857ecde80dde8fa240ee10b1c9de1a878553008f61e93cb2d5e29363f52bed24c9e88223e931bdea8ef76d15ccc945a9853d94095ffd86f04725551019eda91c9837ca09d7c4e7cd56de6d808429f08734d82911312c4ca07145d32c725f48be72ac946c13701064b33e6630d60bc05c5ac363fe77e693fd239d48a01ed6ada464a9ba23f3d2e8610900d20ac6ea38c04723ea8bc86b9477b4e0e98ab9ff2007c59f0ef38125abef824493e94
  // 0803b563576772c2ee2205ef6c1abf9eda756fc27af5bd2f1695447d6f62b1b231ba775b78da35584db7ce2ac5adffa8dbe8eb55c45e887744a5a29bbcdb416655a56ddb3d4307ec2e8eb000d37deeb12b52f2c5ce59f22fb1023d888734094c80955d59fcb4f1340c0311c5209b718c2dde7be9bb6ad1cc3321547cb13216003701aa3077e3f46260670e2ad6e14b74f77ed15e570f4c77f084421942dbd566b4a3634f0ce5e59c57a41b1daffd1e742b17b90a40cb3f1e655ca2db053ba4e6dcd9500f897efa92ae0b41acae3dabcacf3715c6b79a6f25f3c9ad89c57cd861302559d2cada4b45fc6fc56cea646946d4b55e2b004cfb7716c41b57e18436e321de

  // 完整私钥恢复 数组方式
  // const byteArray = [235,142,27,124,90,124,164,15,23,221,82,66,171,209,223,154,43,36,88,87,226,223,59,167,188,195,247,180,104,17,115,96,16,198,14,254,216,97,98,20,161,149,62,20,21,56,94,166,139,126,209,165,170,187,135,254,32,160,57,73,162,139,166,33];
  // const secret = new Uint8Array(byteArray);
  // const keypair = Keypair.fromSecretKey(secret);
  // const privateKey = Buffer.from(keypair.secretKey).toString("hex");
  // console.log("privateKey:", privateKey);
  // console.log("publicKey:", keypair.publicKey.toBase58());

  // 完整私钥恢复 十六进制字符串方式
  // const privateKey = Buffer.from(
  //   "eb8e1b7c5a7ca40f17dd5242abd1df9a2b245857e2df3ba7bcc3f7b46811736010c60efed8616214a1953e1415385ea68b7ed1a5aabb87fe20a03949a28ba621",
  //   "hex",
  // );
  // const keyPair = Keypair.fromSecretKey(privateKey);
  // console.log("publicKey:", keyPair.publicKey.toBase58());

  // 33XQkrJ4NHNfdeRGw9Vp1ndLq7dQ75D3Je94v7ZF1fv6 | 77d07e979b8e976eb0ce4fcea3f87cb94344b39f9cf2f17a198ddbeeadc0756e1e5ceb717982b46daad11e469e4b81a29981d1104395fdd5b9227f60204b0b3f
  // DB: 0802c55122acd5b9cb68d1e932dc5c62d53f09508ab417f7eff290c6e333fedcea166880d1066ef2ff610f8d6f1df96e11b09b683f38f0721be2036a37c7a96b89e266bb2c94ce71ed7e0ce6aaa52ebd251ea08c3e22a92c5637f1cc7f89402d32ae695e25ca7ea6ce981292aba4c7db2de7bc06d32841c7ac772cfc8a5b47369512e819c754496578ea689e331360ef3f39f4d44ad824cf91d0fe1af6658629d94b5bc2c42f6bdbb010a8df7641b4303ece83ddab518d510ff244678d9ece3e6eedcff11f3059990624947d8b0e89b066f21323e5ba6da908a932e78e3cdb6de78023a82753280ea5a22557ab1dc4175f7d72dc9ef746e36c062f7bc5a6dcbf50bf
  // email: 080329f733fa316b20d237652b7d72bb31b9833acfdd92de1650d8a31c4681c69fe35cc63705598b0edf8641d6a90b7b97815805aeef889f98078c78a2847314430c55073af2a98715d80a9dff79396db911f09c210273f77da4074ece1760972bcfd32eb9164159a9951b59702a2a04b561e20d343cef2afac23a95cf74eaba515e9c542af9e359440e5c3ba42e5039ae128ef56f53365d57c981978d98c54b3b4cf884a6b2d08de8befcaf4d60ee0421f34cd9704745c68694666045a7a9d85972265c9e82fb5105f8de2b40c643e0553c9453191fd51d0ca92bd0c983387f1a59bcc1ba053c43795bb91b700da683fe524b99d14d65f95a85b6e829f5b26e786e

  // 完整私钥恢复 片段方式
  // const privateKeyPieceDBBuffer = Buffer.from("0802c55122acd5b9cb68d1e932dc5c62d53f09508ab417f7eff290c6e333fedcea166880d1066ef2ff610f8d6f1df96e11b09b683f38f0721be2036a37c7a96b89e266bb2c94ce71ed7e0ce6aaa52ebd251ea08c3e22a92c5637f1cc7f89402d32ae695e25ca7ea6ce981292aba4c7db2de7bc06d32841c7ac772cfc8a5b47369512e819c754496578ea689e331360ef3f39f4d44ad824cf91d0fe1af6658629d94b5bc2c42f6bdbb010a8df7641b4303ece83ddab518d510ff244678d9ece3e6eedcff11f3059990624947d8b0e89b066f21323e5ba6da908a932e78e3cdb6de78023a82753280ea5a22557ab1dc4175f7d72dc9ef746e36c062f7bc5a6dcbf50bf", "hex");
  // const privateKeyPieceEmailBuffer = Buffer.from("080329f733fa316b20d237652b7d72bb31b9833acfdd92de1650d8a31c4681c69fe35cc63705598b0edf8641d6a90b7b97815805aeef889f98078c78a2847314430c55073af2a98715d80a9dff79396db911f09c210273f77da4074ece1760972bcfd32eb9164159a9951b59702a2a04b561e20d343cef2afac23a95cf74eaba515e9c542af9e359440e5c3ba42e5039ae128ef56f53365d57c981978d98c54b3b4cf884a6b2d08de8befcaf4d60ee0421f34cd9704745c68694666045a7a9d85972265c9e82fb5105f8de2b40c643e0553c9453191fd51d0ca92bd0c983387f1a59bcc1ba053c43795bb91b700da683fe524b99d14d65f95a85b6e829f5b26e786e", "hex");
  // const shareArr = [privateKeyPieceEmailBuffer, privateKeyPieceDBBuffer];

  // 验证私钥
  // const recoveredPrivateKey = KeypairUtils.combineAndDecryptPrivateKey(shareArr, "Rd123123", "33XQkrJ4NHNfdeRGw9Vp1ndLq7dQ75D3Je94v7ZF1fv6");
  // console.log(Buffer.from(recoveredPrivateKey).toString("hex"));

  // 十六进制转数组。以十进制
  // const hexString = "77d07e979b8e976eb0ce4fcea3f87cb94344b39f9cf2f17a198ddbeeadc0756e1e5ceb717982b46daad11e469e4b81a29981d1104395fdd5b9227f60204b0b3f";
  // const byteArray: number[] = [];
  // for (let i = 0; i < hexString.length; i += 2) {
  //   const byte = parseInt(hexString.slice(i, i + 2), 16);
  //   byteArray.push(byte);
  // }
  // console.log(byteArray);

  console.log(`\n\x1b[1m\x1b[34m================ end ================\x1b[0m`);
})();
